
package com;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.7-b01-
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "HumanResourceService", targetNamespace = "http://mycompany.com/hr/definitions", wsdlLocation = "file:/Users/venusurampudi/git/Webservices/src/main/resources/wsdl/provider/hr.wsdl")
public class HumanResourceService
    extends Service
{

    private final static URL HUMANRESOURCESERVICE_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(HumanResourceService.class.getName());

    static {
        URL url = null;
        try {
            URL baseUrl;
            baseUrl = HumanResourceService.class.getResource(".");
            url = new URL(baseUrl, "file:/Users/venusurampudi/git/Webservices/src/main/resources/wsdl/provider/hr.wsdl");
        } catch (MalformedURLException e) {
            logger.warning("Failed to create URL for the wsdl Location: 'file:/Users/venusurampudi/git/Webservices/src/main/resources/wsdl/provider/hr.wsdl', retrying as a local file");
            logger.warning(e.getMessage());
        }
        HUMANRESOURCESERVICE_WSDL_LOCATION = url;
    }

    public HumanResourceService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public HumanResourceService() {
        super(HUMANRESOURCESERVICE_WSDL_LOCATION, new QName("http://mycompany.com/hr/definitions", "HumanResourceService"));
    }

    /**
     *
     * @return
     *     returns HumanResource
     */
    @WebEndpoint(name = "HumanResourcePort")
    public HumanResource getHumanResourcePort() {
        return super.getPort(new QName("http://mycompany.com/hr/definitions", "HumanResourcePort"), HumanResource.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HumanResource
     */
    @WebEndpoint(name = "HumanResourcePort")
    public HumanResource getHumanResourcePort(WebServiceFeature... features) {
        return super.getPort(new QName("http://mycompany.com/hr/definitions", "HumanResourcePort"), HumanResource.class, features);
    }

}
